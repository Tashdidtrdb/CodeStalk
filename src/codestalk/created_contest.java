package codestalk;

import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

public class created_contest extends javax.swing.JFrame {
    Set<String>str;
    DefaultTableModel table_model;
    Integer time_left = 0;
    String user = null;
    public created_contest(String name) {
        user = name;
        initComponents();
        str = new HashSet<String>();   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        tag_chooser = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tags_selected = new javax.swing.JLabel();
        create = new javax.swing.JButton();
        add = new javax.swing.JButton();
        scroller2 = new javax.swing.JScrollPane();
        problems_table = new javax.swing.JTable();
        problem_number = new javax.swing.JTextField();
        problem_no = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        time = new javax.swing.JLabel();
        problem_no1 = new javax.swing.JLabel();
        duration = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1000, 600));
        setResizable(false);

        panel.setBackground(new java.awt.Color(0, 128, 128));
        panel.setPreferredSize(new java.awt.Dimension(1000, 600));

        tag_chooser.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        tag_chooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2-sat", "binary search", "bitmasks", "brute force", "chinese remainder theorem", "combinatorics", "constructive algorithms", "data structures", "dfs and similar", "divide and conquer", "dp", "dsu", "expression parsing", "fft", "flows", "games", "geometry", "graph matchings", "graphs", "greedy", "hashing", "implementation", "interactive", "math", "matrices", "meet-in-the-middle", "number theory ", "probabilities", "schedules", "shortest paths", "sortings", "string suffix structures", "strings", "ternary search", "trees", "two pointers" }));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Tags:");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Added Tags:");

        tags_selected.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N

        create.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        add.setText("Add");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        problems_table.setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
        problems_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Tags", "Online Judge", "Link"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        problems_table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        problems_table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                problems_tableMouseClicked(evt);
            }
        });
        scroller2.setViewportView(problems_table);

        problem_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                problem_numberActionPerformed(evt);
            }
        });

        problem_no.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        problem_no.setForeground(new java.awt.Color(255, 255, 255));
        problem_no.setText("Time:");

        jButton1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        time.setBackground(new java.awt.Color(255, 255, 255));
        time.setFont(new java.awt.Font("Calibri", 1, 36)); // NOI18N
        time.setForeground(new java.awt.Color(255, 255, 255));
        time.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        problem_no1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        problem_no1.setForeground(new java.awt.Color(255, 255, 255));
        problem_no1.setText("No. of Problems");

        duration.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tags_selected, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(86, 86, 86))
                    .addComponent(scroller2, javax.swing.GroupLayout.DEFAULT_SIZE, 980, Short.MAX_VALUE)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelLayout.createSequentialGroup()
                                .addComponent(create)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelLayout.createSequentialGroup()
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(problem_no1))
                                .addGap(18, 18, 18)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tag_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(problem_number))
                                .addGap(18, 18, 18)
                                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(add)
                                    .addGroup(panelLayout.createSequentialGroup()
                                        .addComponent(problem_no)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(duration, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tags_selected, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tag_chooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(add))
                        .addGap(10, 10, 10)
                        .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(problem_no, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(problem_number, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(problem_no1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelLayout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(scroller2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
        // TODO add your handling code here:
        time_left = Integer.parseInt(duration.getText());
        get_cf_problems();
        
        Thread t = new Thread(new Runnable(){
             @Override
            public void run(){
                while(time_left >= 0){
                    time.setText(time_left.toString());
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                    }
                    time_left--; 
                }
            }
        });
                
        t.start();
      
    }//GEN-LAST:event_createActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        String t = tag_chooser.getSelectedItem().toString(); 
        System.out.println(t);
        str.add(t);
        String s="";
        for(String i: str){
            s+=(", " + i);
        }
        System.out.println(s);
        tags_selected.setText(s);
    }//GEN-LAST:event_addActionPerformed
    
    void get_cf_problems(){
        BufferedReader reader;
        String line;
        StringBuffer responseContent = new StringBuffer();
        HttpURLConnection connection;
        try {
            URL url = new URL("https://codeforces.com/api/problemset.problems");
            connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            int status = connection.getResponseCode();
            //System.out.println(status);
            if(status > 299){
                reader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                while((line = reader.readLine()) != null){
                    responseContent.append(line);
                }
                reader.close();
            } else{
                reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                while((line = reader.readLine()) != null){
                    responseContent.append(line);
                }
                reader.close();
            }
        }catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        
        parse(responseContent.toString());
        
    }
    
    void parse(String responseBody){
        JSONObject response = new JSONObject(responseBody);
        JSONObject result = response.getJSONObject("result");
        JSONArray problems = result.getJSONArray("problems");
        //JSONArray problemStatistics = result.getJSONArray("problemStatistics");
        boolean ok = false, check = false;
        int count = 0;
        Integer prob = 0;
        for(int i=0;i<problems.length();i++){
            check = false;
            JSONObject obj = problems.getJSONObject(i);
            String name = obj.getInt("contestId") + " " + obj.getString("index") + " " + obj.getString("name");
            String tags = "";
            JSONArray tag = obj.getJSONArray("tags");
            for(int j=0;j<tag.length();j++){
                for(String s: str){
                    if(s.equals(tag.getString(j))){
                        check = true;
                    }
                }
                tags += tag.getString(j);
                if(j != tag.length() - 1) tags += " , ";
            }
            String judge = "Codeforces";
            String link = "https://codeforces.com/problemset/problem/" + obj.getInt("contestId") + "/" + obj.getString("index");
            if(check){
                if(count == 1){
                    table_model = (DefaultTableModel) problems_table.getModel();
                    table_model.setRowCount(0);
                }
                ok = true;
                add_row(name,tags,judge,link);
                prob++;
                Integer cc = Integer.parseInt(problem_number.getText().trim());
                System.out.println(cc);
                if(prob == cc){
                    return;
                }
            }
        }
        
        if(!ok){
            JOptionPane.showMessageDialog(this, "No problems found");
        }
}
        
    void add_row(String name, String tags, String judge, String link){
        table_model = (DefaultTableModel) problems_table.getModel();
    
        String data[] = {name,tags,judge,link};
        table_model.addRow(data);
    }
    
    private void problems_tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_problems_tableMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2){
            try {
                Desktop desktop = java.awt.Desktop.getDesktop();
                URI oURL = new URI(problems_table.getValueAt(problems_table.getSelectedRow(), 3).toString());
                desktop.browse(oURL);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        else if(evt.getClickCount() == 1){

        }
    }//GEN-LAST:event_problems_tableMouseClicked

    private void problem_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_problem_numberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_problem_numberActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            Problemset problems = new Problemset(user);
            problems.setVisible(true);
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(created_contest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(created_contest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(created_contest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(created_contest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(created_contest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new created_contest("null").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton create;
    private javax.swing.JTextField duration;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel panel;
    private javax.swing.JLabel problem_no;
    private javax.swing.JLabel problem_no1;
    private javax.swing.JTextField problem_number;
    private javax.swing.JTable problems_table;
    private javax.swing.JScrollPane scroller;
    private javax.swing.JScrollPane scroller1;
    private javax.swing.JScrollPane scroller2;
    private javax.swing.JComboBox<String> tag_chooser;
    private javax.swing.JLabel tags_selected;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables
}
